{% liquid
  assign product = closest.product
  if request.visual_preview_mode and product == blank
    assign product = collections.all.products.first
  endif

  assign variant = closest.product.selected_or_first_available_variant
  assign inventory_quantity = variant.inventory_quantity
  assign inventory_policy = variant.inventory_policy

  if variant.inventory_management == 'shopify'
    assign inventory_managed = true
  endif

  if variant.quantity_rule.min > variant.inventory_quantity and inventory_managed and inventory_policy == 'deny'
    assign quantity_rule_soldout = true
  endif

  # ===========================================
  # PREORDER LOGIC WITH SMART DATE/TIME FORMATTING
  # ===========================================
  
  # Get preorder metafields
  assign preorder_drop_date = product.metafields.custom.preorder_drop_date.value
  assign preorder_pickup_start = product.metafields.custom.preorder_pickup_start.value
  assign pickup_duration_days = product.metafields.custom.pickup_duration_days.value
  
  # Initialize preorder variables
  assign preorder_is_preorder = false
  assign preorder_is_coming_soon = false
  assign preorder_formatted_drop_date = ''
  assign preorder_formatted_pickup_start = ''
  assign preorder_formatted_pickup_end = ''
  assign preorder_smart_drop_text = ''
  
  # Check if this is a preorder product
  if preorder_drop_date != blank
    assign preorder_is_preorder = true
    assign current_date = 'now' | date: '%s'
    assign drop_date_timestamp = preorder_drop_date | date: '%s'
    
    # Check if we're before the drop date (coming soon)
    if current_date < drop_date_timestamp
      assign preorder_is_coming_soon = true
      
      # Create smart date/time formatting for drop date
      # current_day: 0=Sunday, 1=Monday, etc.
      assign current_day = 'now' | date: '%w'
      assign drop_day = preorder_drop_date | date: '%w'
      assign drop_date_only = preorder_drop_date | date: '%Y-%m-%d'
      assign current_date_only = 'now' | date: '%Y-%m-%d'
      
      # Calculate days difference
      assign current_date_timestamp = current_date_only | date: '%s'
      assign drop_date_only_timestamp = drop_date_only | date: '%s'
      assign days_diff = drop_date_only_timestamp | minus: current_date_timestamp | divided_by: 86400
      
      # Format time in EST (assuming drop date is in UTC)
      assign drop_time_est = preorder_drop_date | date: '%l:%M%p EST'
      assign drop_day_name = preorder_drop_date | date: '%A'
      
      # Create smart relative date text
      if days_diff == 0
        assign preorder_smart_drop_text = 'Today @ ' | append: drop_time_est
      elsif days_diff == 1
        assign preorder_smart_drop_text = 'Tomorrow @ ' | append: drop_time_est
      elsif days_diff <= 6
        # Within a week - use day name
        if days_diff == 1
          assign preorder_smart_drop_text = 'This ' | append: drop_day_name | append: ' @ ' | append: drop_time_est
        elsif days_diff <= 3
          assign preorder_smart_drop_text = 'This ' | append: drop_day_name | append: ' @ ' | append: drop_time_est
        else
          assign preorder_smart_drop_text = drop_day_name | append: ' @ ' | append: drop_time_est
        endif
      else
        # More than a week away - use date
        assign drop_month_day = preorder_drop_date | date: '%B %-d'
        assign preorder_smart_drop_text = drop_month_day | append: ' @ ' | append: drop_time_est
      endif
    endif
    
    # Format pickup dates for informational display (not logic)
    if preorder_pickup_start != blank
      assign preorder_formatted_pickup_start = preorder_pickup_start | date: '%B %-d'
      
      # Calculate pickup end date if duration is specified
      if pickup_duration_days != blank and pickup_duration_days > 0
        assign pickup_start_timestamp = preorder_pickup_start | date: '%s'
        assign duration_seconds = pickup_duration_days | times: 86400
        assign pickup_end_timestamp = pickup_start_timestamp | plus: duration_seconds
        assign preorder_formatted_pickup_end = pickup_end_timestamp | date: '%B %-d'
      endif
    endif
    
    # Fallback formatting
    assign preorder_formatted_drop_date = preorder_drop_date | date: '%B %-d'
  endif

  # ===========================================
  # BUTTON LOGIC - CORRECTED
  # ===========================================
  
  # Check if BIS should be shown (sold out + BIS enabled)
  assign show_bis_button = false
  assign bis_enabled = settings.enable_back_in_stock | default: true
  
  # Standard inventory logic first
  if inventory_managed
    if inventory_quantity <= 0 and inventory_policy == 'deny' or quantity_rule_soldout
      # Product is sold out - check if BIS should be shown instead
      if bis_enabled
        assign show_bis_button = true
        assign can_add_to_cart = false
      else
        assign can_add_to_cart = false
        assign add_to_cart_text = 'products.product.sold_out' | t
      endif
    else
      assign can_add_to_cart = true
      assign add_to_cart_text = 'products.product.add_to_cart' | t
    endif
  else
    if closest.product.selected_or_first_available_variant != null
      assign can_add_to_cart = true
      assign add_to_cart_text = 'products.product.add_to_cart' | t
    else
      # No variant available - check if BIS should be shown
      if bis_enabled
        assign show_bis_button = true
        assign can_add_to_cart = false
      else
        assign can_add_to_cart = false
        assign add_to_cart_text = 'products.product.unavailable' | t
      endif
    endif
  endif
  
  # Override ONLY if preorder and coming soon
  if preorder_is_preorder and preorder_is_coming_soon
    # Before drop date - always disabled, regardless of inventory
    assign can_add_to_cart = false
    # Customizable preorder button text - Theme settings with block overrides
    assign preorder_prefix = block.settings.preorder_coming_soon_text | default: settings.preorder_coming_soon_text | default: 'Available'
    
    if preorder_smart_drop_text != blank
      assign add_to_cart_text = preorder_prefix | append: ' ' | append: preorder_smart_drop_text
    else
      assign add_to_cart_text = preorder_prefix | append: ' ' | append: preorder_formatted_drop_date
    endif
  endif
  
  # After drop date, preorder products work exactly like normal products (inventory-dependent)
%}

<span
  class="buy-buttons-block buy-buttons-block--{{ block.id }}"
  {{ block.shopify_attributes }}
>
  {%- if product != blank -%}
    {%- comment -%} Show styled preorder info box instead of disabled button {%- endcomment -%}
    {%- if preorder_is_preorder and preorder_is_coming_soon -%}
      <div class="preorder-info-box" style="
        background: {{ block.settings.preorder_box_background | default: settings.preorder_box_background | default: '#f0f7f0' }};
        border: 2px solid {{ block.settings.preorder_box_border | default: settings.preorder_box_border | default: '#4a7c4a' }};
        color: {{ block.settings.preorder_box_text | default: settings.preorder_box_text | default: '#2d5a2d' }};
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        margin: 16px 0;
      ">
        <div style="font-size: 1.1em; font-weight: 600; margin-bottom: 8px;">
          {{ block.settings.preorder_box_heading | default: settings.preorder_box_heading | default: 'Coming Soon' }}
        </div>
        <div style="font-size: 1em;">
          {%- if preorder_smart_drop_text != blank -%}
            {{ preorder_smart_drop_text }}
          {%- else -%}
            {{ preorder_formatted_drop_date }}
          {%- endif -%}
        </div>
        {%- if block.settings.show_preorder_notify or settings.show_preorder_notify -%}
          <button type="button" 
                  class="button button--secondary" 
                  style="margin-top: 12px;"
                  onclick="document.getElementById('klaviyo-bis-trigger-{{ product.id }}').click();">
            {{ block.settings.preorder_notify_text | default: settings.preorder_notify_text | default: 'Notify Me' }}
          </button>
        {%- endif -%}
      </div>
      {%- comment -%} Hidden Klaviyo trigger {%- endcomment -%}
      <div style="display: none;">
        {% render 'klaviyo-bis-integration' %}
      </div>
    {%- elsif show_bis_button -%}
      {% comment %} Include enhanced preorder + BIS integration {% endcomment %}
      {% render 'klaviyo-bis-integration' %}
      
      {% comment %} Original BIS button as fallback {% endcomment %}
      <div id="klaviyo-bis-button-container" style="display: none;">
        <!-- Use Klaviyo's expected data attributes for Back in Stock -->
        <button type="button" 
                class="bis-button button klaviyo-bis-trigger"
                data-product-id="{{ product.id }}"
                data-variant-id="{{ variant.id }}"
                data-product-title="{{ product.title | escape }}"
                data-product-url="{{ request.origin }}{{ product.url }}"
                data-product-image="{{ variant.featured_image | default: product.featured_image | image_url: width: 200 }}"
                data-variant-price="{{ variant.price | money_without_currency }}"
                data-klaviyo-form-id="{{ settings.klaviyo_bis_form_id | default: 'WQZSWn' }}"
onclick="
                event.preventDefault();
                
                var formId = '{{ settings.klaviyo_bis_form_id | default: 'WQZSWn' }}';
                
                // Method 1: Try _learnq form display
                if (typeof window._learnq !== 'undefined' && window._learnq.push) {
                  try {
                    window._learnq.push(['showForm', formId]);
                    console.log('Tried _learnq showForm with ID:', formId);
                  } catch (e) {
                    console.log('_learnq showForm failed:', e);
                  }
                }
                
                // Method 2: Try klaviyo global object
                if (typeof window.klaviyo !== 'undefined' && window.klaviyo.push) {
                  try {
                    window.klaviyo.push(['openForm', formId]);
                    console.log('Tried klaviyo openForm with ID:', formId);
                  } catch (e) {
                    console.log('klaviyo openForm failed:', e);
                  }
                }
                
                // Method 3: Try KlaviyoSubscribe global function
                if (typeof window.KlaviyoSubscribe !== 'undefined') {
                  try {
                    window.KlaviyoSubscribe.attachToForms();
                    window.KlaviyoSubscribe.show(formId);
                    console.log('Tried KlaviyoSubscribe.show with ID:', formId);
                  } catch (e) {
                    console.log('KlaviyoSubscribe failed:', e);
                  }
                }
                
                // Method 4: Direct DOM manipulation to find and trigger form
                setTimeout(function() {
                  var klaviyoForm = document.querySelector('[data-testid=klaviyo-form-' + formId + ']') ||
                                    document.querySelector('.klaviyo-form-' + formId) ||
                                    document.querySelector('#klaviyo_' + formId) ||
                                    document.querySelector('[class*=' + formId + ']');
                  
                  if (klaviyoForm) {
                    if (klaviyoForm.style) {
                      klaviyoForm.style.display = 'block';
                      klaviyoForm.style.visibility = 'visible';
                      klaviyoForm.style.opacity = '1';
                    }
                    console.log('Found and displayed Klaviyo form:', klaviyoForm);
                  } else {
                    console.log('No Klaviyo form found with ID:', formId);
                  }
                }, 100);
                
                // Log debug information
                console.log('Available Klaviyo objects:', {
                  _learnq: typeof window._learnq,
                  klaviyo: typeof window.klaviyo,
                  KlaviyoSubscribe: typeof window.KlaviyoSubscribe,
                  formId: formId
                });
                ">
          {% if preorder_is_preorder %}{{ block.settings.preorder_button_text | default: settings.preorder_button_text | default: 'Get Early Access' }}{% else %}{{ block.settings.bis_button_text | default: settings.bis_button_text | default: 'Notify When Available' }}{% endif %}
        </button>
      </div>
      
      <style>
        #klaviyo-bis-button-container {
          display: block;
          margin: 0;
        }
        .bis-button {
          width: 100%;
          min-height: var(--height-buy-buttons, 48px);
          padding-inline: var(--padding-4xl);
          padding-block: var(--padding-lg);
          background: {{ settings.bis_button_background | default: '#ffffff' }};
          color: {{ settings.bis_button_text_color | default: '#000000' }};
          {% case settings.bis_button_text_case %}
            {% when 'uppercase' %}
              text-transform: uppercase;
              letter-spacing: 0.5px;
            {% when 'capitalize' %}
              text-transform: capitalize;
              letter-spacing: 0.2px;
            {% when 'lowercase' %}
              text-transform: lowercase;
              letter-spacing: 0.2px;
            {% when 'as-typed' %}
              text-transform: none;
              letter-spacing: normal;
            {% else %}
              text-transform: var(--button-text-case-primary);
          {% endcase %}
        }
      </style>
    {%- else -%}
      {%- assign product_form_id = 'BuyButtons-ProductForm-' | append: block.id -%}
      <product-form-component
      data-section-id="{{ section.id }}"
      data-product-id="{{ product.id }}"
      data-product-url="{{ product.url }}"
      on:submit="/handleSubmit"
      data-quantity-default="{% if product.selected_or_first_available_variant.quantity_rule.min %}{{ product.selected_or_first_available_variant.quantity_rule.min }}{% else %}1{% endif %}"
    >
      <div
        class="visually-hidden"
        aria-live="assertive"
        role="status"
        aria-atomic="true"
        ref="liveRegion"
      ></div>
      {%- form 'product', product, id: product_form_id, novalidate: 'novalidate', data-type: 'add-to-cart-form' -%}
        <input
          type="hidden"
          name="id"
          ref="variantId"
          value="{{ product.selected_or_first_available_variant.id }}"
        >
        <div
          class="product-form-buttons spacing-style{% if block.settings.stacking %} product-form-buttons--stacked{% endif %}"
          style="{% render 'spacing-style', settings: block.settings %}"
        >
          {% if can_add_to_cart %}
            {% content_for 'block', type: 'quantity', id: 'quantity' %}
          {% endif %}

          {% content_for 'block',
            type: 'add-to-cart',
            id: 'add-to-cart',
            can_add_to_cart: can_add_to_cart,
            add_to_cart_text: add_to_cart_text
          %}
          <span
            class="product-form-text__error hidden"
            ref="addToCartTextError"
          >
            <span class="svg-wrapper product-form-icon--error">
              {{- 'icon-error.svg' | inline_asset_content -}}
            </span>
          </span>
          {% content_for 'block',
            type: 'accelerated-checkout',
            id: 'accelerated-checkout',
            can_add_to_cart: can_add_to_cart
          %}
        </div>
      {%- endform -%}
    </product-form-component>
    {%- endif -%}
  {%- else -%}
    <div class="product-form-buttons">
      <button
        type="submit"
        name="add"
        class="button"
        disabled
      >
        {{ 'blocks.sold_out' | t }}
      </button>
    </div>
  {%- endif -%}
</span>

{% if block.settings.show_pickup_availability %}
  <script
    src="{{ 'local-pickup.js' | asset_url }}"
    type="module"
  ></script>

  {%- assign pick_up_availabilities = closest.product.selected_or_first_available_variant.store_availabilities
    | where: 'pick_up_enabled', true
  -%}

  <local-pickup
    class="spacing-style product__pickup-availabilities"
    {% if pick_up_availabilities.size == 0 %}
      hidden
    {% endif %}
    data-section-id="{{ section.id }}"
    data-product-url="{{ closest.product.url }}"
    data-variant-id="{{ closest.product.selected_or_first_available_variant.id }}"
    style="{% render 'spacing-style', settings: block.settings %}"
    ref="localPickupButton"
  >
    {% if can_add_to_cart %}
      <dialog-component>
        <div class="pickup-availability__row">
          <div class="pickup-availability__column">
            <span class="svg-wrapper">
              {{- 'icon-unavailable.svg' | inline_asset_content -}}
            </span>
            <span class="pickup-availability__text">{{ 'products.product.pickup_availability.unavailable' | t }}</span>
          </div>
        </div>
      </dialog-component>
    {% endif %}
  </local-pickup>
{% endif %}

{% schema %}
{
  "name": "t:names.product_buy_buttons",
  "tag": null,
  "settings": [
    {
      "type": "paragraph",
      "content": "t:content.resource_reference_product"
    },
    {
      "type": "checkbox",
      "id": "stacking",
      "label": "t:settings.always_stack_buttons",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_pickup_availability",
      "label": "t:settings.show_pickup_availability",
      "default": true
    },
    {
      "type": "header",
      "content": "Preorder Settings"
    },
    {
      "type": "text",
      "id": "preorder_coming_soon_text",
      "label": "Preorder Coming Soon Text",
      "info": "Text shown on disabled preorder buttons (e.g., 'Available', 'Coming Soon', 'Exclusively for Members'). Leave blank to use theme default.",
      "placeholder": "Available"
    },
    {
      "type": "text",
      "id": "preorder_button_text",
      "label": "Preorder Button Text",
      "info": "Text for preorder notification buttons. Leave blank to use theme default.",
      "placeholder": "Get Early Access"
    },
    {
      "type": "text",
      "id": "bis_button_text",
      "label": "Back in Stock Button Text",
      "info": "Text for back-in-stock notification buttons. Leave blank to use theme default.",
      "placeholder": "Notify When Available"
    },
    {
      "type": "header",
      "content": "Preorder Info Box"
    },
    {
      "type": "text",
      "id": "preorder_box_heading",
      "label": "Info Box Heading",
      "placeholder": "Coming Soon",
      "info": "Heading shown in the preorder info box"
    },
    {
      "type": "checkbox",
      "id": "show_preorder_notify",
      "label": "Show Notify Button",
      "default": true,
      "info": "Show a notify button inside the preorder info box"
    },
    {
      "type": "text",
      "id": "preorder_notify_text",
      "label": "Notify Button Text",
      "placeholder": "Notify Me",
      "default": "Notify Me When Available"
    },
    {
      "type": "color",
      "id": "preorder_box_background",
      "label": "Box Background Color",
      "info": "Leave blank for theme default"
    },
    {
      "type": "color",
      "id": "preorder_box_border",
      "label": "Box Border Color",
      "info": "Leave blank for theme default"
    },
    {
      "type": "color",
      "id": "preorder_box_text",
      "label": "Box Text Color",
      "info": "Leave blank for theme default"
    },
    {
      "type": "header",
      "content": "t:content.padding"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "t:settings.top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "t:settings.bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-inline-start",
      "label": "t:settings.left",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-inline-end",
      "label": "t:settings.right",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    }
  ],
  "presets": [
    {
      "name": "t:names.product_buy_buttons",
      "category": "t:categories.product",
      "blocks": {
        "quantity": {
          "type": "quantity",
          "static": true
        },
        "add-to-cart": {
          "type": "add-to-cart",
          "static": true,
          "settings": {
            "style_class": "button-secondary"
          }
        },
        "accelerated-checkout": {
          "type": "accelerated-checkout",
          "static": true
        }
      }
    }
  ]
}
{% endschema %}